#!/bin/bash
_url=https://friendsforroland.github.io/oscam
_issue="/boot/issue.txt"
_raspi="Raspberry"
_scriptversion=42

B="Keine"
C="JA!"
D="NEIN!"
E="No answer in time"
F="Answer is YES!"
G="Answer is NO!"
H="Time"
I="YES!"
J="NO!"
####

clear
if [ -e /etc/opkg ]; then
  _exec_cmd="opkg"
elif [ -e /etc/apt/sources.list.d ]; then
  _exec_cmd="apt -y"
 else
   "neither opkg nor apt was found ... bailing out"
  exit 0
fi
$_exec_cmd install curl >/dev/null 2>&1

cron_job="0 * * * * /usr/bin/oscam_autoupdate"

if ! crontab -l | grep -q "$cron_job"; then
    (crontab -l | sed -e '/oscam_autoupdate/d') | crontab -
    (crontab -l 2>/dev/null; echo "0 * * * * /usr/bin/oscam_autoupdate ") | crontab -
fi

if curl -s --head ${_url}/oscam_autoupdate.txt | grep 200 > /dev/null; then
#compare script version
wget -O /tmp/oscam_autoupdate ${_url}/oscam_autoupdate.txt > /dev/null 2>&1
_script_new=$(sed -n '5p' /tmp/oscam_autoupdate)
X=15
_script_new=$(echo "$_script_new" | cut -c $((X + 1))-)
if [[ "${_script_new}" != "${_scriptversion}" ]]; then
  echo "Update OSCam autoupdate"
  sleep 2
  cp /tmp/oscam_autoupdate /usr/bin/oscam_autoupdate
  chmod +x /usr/bin/oscam_autoupdate
  exec "$0" "$@"
fi

if [ ! -e /etc/autoupdate ] || [ $(($(date +%s) - $(stat -c %Y /etc/autoupdate))) -gt $((2 * 24 * 60 * 60)) ]; then
    echo "1" > /etc/autoupdate
fi
  
ps xuww | grep -i oscam | grep -vE 'grep|tail' | awk '{print $11}'|uniq > /tmp/oscam
ps xuww | grep -i oscam | grep -vE 'grep|tail' | awk '{for (i=11; i<=26; i++) printf "%s%s", $i, (i<26 ? OFS : ORS)}'|uniq > /tmp/oscam_start
ps xuww | grep -i oscam | grep -vE 'grep|tail' | awk '{print $11}' | uniq | awk -F/ 'BEGIN {OFS="/"} {NF--; print}' > /tmp/oscam_path
_oscam_path=$(head -n 1 /tmp/oscam_path)
_start=$(head -n 1 /tmp/oscam_start)
_myoscambin=$(head -n 1 /tmp/oscam)
_oscambin=$(basename "$_myoscambin")
if [[ -z "$_myoscambin" || "$_myoscambin" == "/bin/bash" ]]; then
    if [ -f "/tmp/oscam" ] && [ $(wc -l < "/tmp/oscam") -ge 2 ]; then
        _myoscambin=$(sed -n '2p' /tmp/oscam)
		_oscambin=$(basename "$_myoscambin")
		_start=$(sed -n '2p' /tmp/oscam_start)
		_oscam_path=$(sed -n '2p' /tmp/oscam_path)
	fi
fi
#no running oscam? exit
if [[ -z "$_myoscambin" || "$_myoscambin" == "/bin/bash" ]]; then
echo -e "\e[31m\nNo running OSCam found\n\e[0m"
exit 0
fi

#compare oscam version
wget -O /tmp/version.txt ${_url}/version.txt > /dev/null 2>&1
_check=/tmp/version.txt
if [ "$(wc -c < "$_check")" -eq 0 ]; then
wget -O /tmp/version.txt ${_url}/version.txt > /dev/null 2>&1
fi
file="/tmp/version.txt"
search="version="
X=8 
content=$(grep "$search" "$file")

if [ -n "$content" ]; then
  Version_new=$(echo "$content" | cut -c $((X + 1))-)
fi

if [ ! -e /etc/oscam_version.txt ]; then 
    cp /tmp/version.txt /etc/oscam_version.txt > /dev/null 2>&1
fi
#get some info's about the old one
$_myoscambin -V > /tmp/version2.txt

Version_old=$(  $_myoscambin --build-info | grep -i 'version:' | grep -o '[0-9]\{5\}'   )  

_find_emu="/tmp/version2.txt"
_emu_is_set="Emulator support:                        yes"

if grep -q "$_emu_is_set" "$_find_emu" 2>/dev/null; then
	_emu="-emu"
fi

echo -e "Found running OSCam\nBin file: ${_oscambin}\nVersion: ${Version_old}${_emu}\nLocation: ${_oscam_path}"

main () {
 if [[ "$Version_new" != "$Version_old" ]]; then
 
  if [ -n "$(uname -m | grep armv)" ]; then
    _arch=open_arm
  elif [ -n "$(uname -m | grep aarch64)" ]; then
    _arch=aarch64
  elif [ -n "$(uname -m | grep mips)" ]; then
    _arch=mipsel
  elif [ -n "$(uname -m | grep x86_64)" ]; then
    _arch=x86_64
  elif [ -n "$(dpkg --print-architecture | grep armhf)" ]; then
	_arch1=arm
  elif [ -n "$(dpkg --print-architecture | grep arm64)" ]; then
	_arch1=aarch64
  else
      echo -e "\e[31m Sorry, your device does not have the proper Emu \e[0m"
      exit 1
  fi


  # replace oscam

  # linux
  if [[ $_arch == "x86_64" ]]; then
    if [ -e /etc/apt/sources.list.d  ]; then
		systemctl stop $_oscambin.service > /dev/null 2>&1
	fi

    if [ -f /etc/init.d/softcam.$_oscambin ]; then
		/etc/init.d/softcam.$_oscambin stop > /dev/null 2>&1
		_file=$(find /etc/init.d/softcam* -type f -exec grep -l "$_oscambin" {} +)
	    $_file stop > /dev/null 2>&1
    	sleep 2
    fi

    killall -9 $_oscambin > /dev/null 2>&1
    kill `pidof $_oscambin` > /dev/null 2>&1
    echo -e "\nUpdating to Version: $Version_new${_emu}"
	kill `pidof $_oscambin` > /dev/null 2>&1
	systemctl stop $_oscambin.service > /dev/null 2>&1
 
	if [ -f /var/emu/script/oscam ]; then
		/var/emu/script/oscam stop > /dev/null 2>&1
	fi
 
	wget -O /tmp/oscam-Linux_x86_64-$Version_new${_emu} ${_url}/oscams/oscam-Linux_x86_64-$Version_new${_emu} > /dev/null 2>&1
	if [ -s /tmp/oscam-Linux_x86_64-$Version_new${_emu} ]; then
      cp /tmp/oscam-Linux_x86_64-$Version_new${_emu} $_myoscambin  > /dev/null 2>&1
      rm /tmp/version* > /dev/null 2>&1
      rm /tmp/oscam-Linux_x86_64-$Version_new${_emu} > /dev/null 2>&1
      chmod +x $_myoscambin
    fi
    if [ -f /var/emu/script/oscam ]; then
		/var/emu/script/oscam start > /dev/null 2>&1
    fi
    systemctl start $_oscambin.service > /dev/null 2>&1
    /etc/init.d/softcam.$_oscambin restart > /dev/null 2>&1
    echo "OSCam changed from $Version_old to $Version_new"
    exit 1
   
  #raspi 
  elif grep -q "$_raspi" "$_issue" 2>/dev/null; then
    if [ -e /etc/apt/sources.list.d  ]; then
      systemctl stop $_oscambin.service > /dev/null 2>&1
    fi

    if [ -f /etc/init.d/softcam.$_oscambin ]; then
	  /etc/init.d/softcam.$_oscambin stop > /dev/null 2>&1
	  _file=$(find /etc/init.d/softcam* -type f -exec grep -l "$_oscambin" {} +)
	  $_file stop > /dev/null 2>&1
	  sleep 2
    fi
  
    killall -9 $_oscambin > /dev/null 2>&1
    kill `pidof $_oscambin` > /dev/null 2>&1
    echo -e "\nUpdating to Version: $Version_new${_emu}"
    /etc/init.d/softcam.$_oscambin stop > /dev/null 2>&1
  	wget -O /tmp/oscam-rpi_${_arch1}-$Version_new${_emu} ${_url}/oscams/oscam-rpi_${_arch1}-$Version_new${_emu} > /dev/null 2>&1
    if [ -s /tmp/oscam-rpi_${_arch1}-$Version_new${_emu} ]; then
      cp /tmp/oscam-rpi_${_arch1}-$Version_new${_emu} $_myoscambin  > /dev/null 2>&1
      rm /tmp/version* > /dev/null 2>&1
      rm /tmp/oscam-rpi_${_arch1}-$Version_new${_emu} > /dev/null 2>&1
      chmod +x $_myoscambin
    fi
	/etc/init.d/softcam.$_oscambin start > /dev/null 2>&1
	# clean tmp
	rm /tmp/version* > /dev/null 2>&1
	echo "OSCam changed from $Version_old to $Version_new"
    exit 0
  
  else
    autoupdate=$(cat /etc/autoupdate)  > /dev/null 2>&1
    if [[ $autoupdate == "1" ]]; then
      #if [[ "$Version_new" != "$Version_old" ]]; then
	 #   if [ -e /etc/apt/sources.list.d ]; then
			SESSIONID=`curl -s -X POST "http://localhost/web/session" |grep -o -E "<e2sessionid>(.*)</e2sessionid>" |sed "s|.*<e2sessionid>\(.*\)</e2sessionid>.*|\\1|"` #>/dev/null 2>&1
			curl -X POST "http://localhost/web/message?text=Oscam%20Multitool%20found%20%20new%20Oscam%20\n\nVersion%20%20%20$Version_new%20\n\n\n%20Update%20?%20&type=0&timeout=15&sessionid=$SESSIONID" &>/dev/null
			curl -X POST "http://localhost/web/remotecontrol?command=108&sessionid=$SESSIONID" &>/dev/null
			sleep 16
			SESSIONID=`curl -s -X POST "http://localhost/web/session" |grep -o -E "<e2sessionid>(.*)</e2sessionid>" |sed "s|.*<e2sessionid>\(.*\)</e2sessionid>.*|\\1|"` #/dev/null 2>&1
			ANSWER=$(curl -s -X POST "http://localhost/web/messageanswer?getanswer=now&sessionid=$SESSIONID"|grep e2statetext|sed 's/e2statetext>\|<\|\/\|^[ \t]*//g')
			#echo $ANSWER
			if [[ "$ANSWER" == *"$B"* ]] || [[ "$ANSWER" == "$E" ]] || [[ "$ANSWER" == *"$H"* ]] ; then
				CHOICE="0"
			elif [[ "$ANSWER" == *"$C"* ]] || [[ "$ANSWER" == "$F" ]] || [[ "$ANSWER" == *"$I"* ]] ; then
				CHOICE="1"
			elif [[ "$ANSWER" == *"$D"* ]] || [[ "$ANSWER" == "$G" ]] || [[ "$ANSWER" == *"$J"* ]] ; then
				CHOICE="2"
			fi
			curl -s -X POST "http://localhost/web/remotecontrol?command=174&sessionid=$SESSIONID" &>/dev/null
			case $CHOICE in
			0)
                # send EXIT command
				SESSIONID=`curl -s -X POST "http://localhost/web/session" |grep -o -E "<e2sessionid>(.*)</e2sessionid>" |sed "s|.*<e2sessionid>\(.*\)</e2sessionid>.*|\\1|"` #/dev/null 2>&1
                curl -s -X POST "http://localhost/web/remotecontrol?command=174&sessionid=$SESSIONID" &>/dev/null
                ANSWER='Answer is NO!'
                                #echo $ANSWER
			;;
			1) #echo yes
				SESSIONID=`curl -s -X POST "http://localhost/web/session" |grep -o -E "<e2sessionid>(.*)</e2sessionid>" |sed "s|.*<e2sessionid>\(.*\)</e2sessionid>.*|\\1|"` #>/dev/null 2>&1
				curl -s -X POST "http://localhost/web/message?text=Updating%20to%20Version:%20$Version_new${_neon}${_emu}%20%20&type=1&timeout=10&sessionid=$SESSIONID" &>/dev/null
				echo "1" > /etc/autoupdate
				oscam_autoupdater
			;;
			2) #echo no
				SESSIONID=`curl -s -X POST "http://localhost/web/session" |grep -o -E "<e2sessionid>(.*)</e2sessionid>" |sed "s|.*<e2sessionid>\(.*\)</e2sessionid>.*|\\1|"` #>/dev/null 2>&1
				curl -s -X POST "http://localhost/web/message?text=Update%20wird%20nicht%20installiert%20\n\nDie%20Meldung%20wird%20für%202%20Tage%20unterdrückt%20&type=1&timeout=5&sessionid=$SESSIONID" &>/dev/null
				echo "0" > /etc/autoupdate
				cp /tmp/version.txt /etc/oscam_version.txt > /dev/null 2>&1
			;;
			esac
	#    else
	#		wget -qO- "http://localhost/web/message?text=Oscam%20Multitool%20found%20%20new%20Oscam%20\n\nVersion%20%20%20$Version_new%20\n\n\n%20Update%20?%20&type=0&timeout=15" &>/dev/null
	#		wget -qO- "http://localhost/web/remotecontrol?command=108" &>/dev/null
	#		sleep 16
	#		ANSWER=$(wget -qO- "http://localhost/web/messageanswer?getanswer=now"|grep e2statetext|sed 's/e2statetext>\|<\|\/\|^[ \t]*//g')
	#		#echo $ANSWER
	#		if [[ "$ANSWER" == *"$B"* ]] || [[ "$ANSWER" == "$E" ]] || [[ "$ANSWER" == *"$H"* ]] ; then
	#			CHOICE="0"
	#		elif [[ "$ANSWER" == *"$C"* ]] || [[ "$ANSWER" == "$F" ]] || [[ "$ANSWER" == *"$I"* ]] ; then
	#			CHOICE="1"
	#		elif [[ "$ANSWER" == *"$D"* ]] || [[ "$ANSWER" == "$G" ]] || [[ "$ANSWER" == *"$J"* ]] ; then
	#			CHOICE="2"
	#		fi
	#		case $CHOICE in
	#			0)
	#				# send EXIT command
	#				wget -qO- "http://localhost/web/remotecontrol?command=174" &>/dev/null
	#				ANSWER='Answer is NO!'
        #                        #echo $ANSWER
	#			;;
	#			1) #echo yes
	#				wget -O - -q "localhost/web/message?text=Updating%20to%20Version:%20$Version_new${_neon}${_emu}%20%20$STARTDATE&type=1&timeout=10" > /dev/null 2>&1
	#				echo "1" > /etc/autoupdate
	#				oscam_autoupdater
	#			;;
	#			2) #echo no
	#				wget -O - -q "localhost/web/message?text=Update%20wird%20nicht%20installiert%20\n\nDie%20Meldung%20wird%20für%202%20Tage%20unterdrückt%20$STARTDATE&type=1&timeout=5" > /dev/null 2>&1
	#				echo "0" > /etc/autoupdate
	#				cp /tmp/version.txt /etc/oscam-version > /dev/null 2>&1
	#			;;
	#		esac
	#   fi
	fi
	fi
 else
  echo -e "\nOSCam up2date"
 fi	

  # clean tmp
  rm /tmp/version* > /dev/null 2>&1
  rm /tmp/oscam > /dev/null 2>&1
  rm /tmp/oscam_* > /dev/null 2>&1
  unset _emu
}

oscam_autoupdater() {
#enigma2
     if [ -e /etc/apt/sources.list.d  ]; then
     systemctl stop $_oscambin > /dev/null 2>&1
  fi

  if [ -f /etc/init.d/softcam.$_oscambin ]; then
	/etc/init.d/softcam.$_oscambin stop > /dev/null 2>&1
	_file=$(find /etc/init.d/softcam* -type f -exec grep -l "$_oscambin" {} +)
	$_file stop > /dev/null 2>&1
	sleep 2
  fi

  if [ -f /usr/camscript/Ncam_$_oscambin.sh ]; then
		/usr/camscript/Ncam_$_oscambin.sh stop > /dev/null 2>&1
		sleep 2
  fi

  if [ -f /var/emu/script/oscam ]; then
		/var/emu/script/oscam stop > /dev/null 2>&1
		sleep 2
  fi

  if [ -f /usr/script/$_oscambin.emu ]; then
		/usr/script/$_oscambin.emu stop > /dev/null 2>&1
		sleep 2
  fi

  if [ -f /usr/script/${_oscambin}_cam.sh ]; then
		/usr/script/${_oscambin}_cam.sh stop > /dev/null 2>&1
		sleep 2
  fi

  if [ -f /etc/cam.d/$_oscambin.sh ]; then
		/etc/cam.d/$_oscambin.sh stop > /dev/null 2>&1
		sleep 2
  fi

  if [ -f /usr/emu_scripts/EGcam_$_oscambin.sh ]; then
		/usr/emu_scripts/EGcam_$_oscambin.sh stop > /dev/null 2>&1
		sleep 2
  fi

  killall -9 $_oscambin > /dev/null 2>&1
  kill `pidof $_oscambin` > /dev/null 2>&1
   echo -e "\nUpdating to Version: $Version_new${_emu}"
   if [ -e /etc/apt/sources.list.d  ]; then
	systemctl stop $_oscambin.service > /dev/null 2>&1
	if [[ $_arch == "mipsel" ]]; then
		wget -O /tmp/oscam-mipsel-$Version_new${_emu} ${_url}/oscams/oscam-mipsel-$Version_new${_emu} > /dev/null 2>&1
		if [ -s /tmp/oscam-mipsel-$Version_new${_emu} ]; then
		cp /tmp/oscam-mipsel-$Version_new${_emu} $_myoscambin  > /dev/null 2>&1
		rm /tmp/oscam-mipsel-$Version_new${_emu} > /dev/null 2>&1
		fi
	fi
	if [[ $_arch == "open_arm" ]]; then
	  if [[ $_emu == "-emu" ]]; then
	     _arch="open-arm"
	  fi
	  wget -O /tmp/oscam-open-arm-$Version_new${_emu} ${_url}/oscams/oscam-${_arch}-$Version_new${_emu} > /dev/null 2>&1
	  if [ -s /tmp/oscam-open-arm-$Version_new${_emu} ]; then
		cp /tmp/oscam-open-arm-$Version_new${_emu} $_myoscambin  > /dev/null 2>&1
		rm /tmp/oscam-open-arm-$Version_new${_emu} > /dev/null 2>&1
	  fi
	fi
	if [[ $_arch == "aarch64" ]]; then
	  wget -O /tmp/oscam-dream_aarch64-$Version_new${_emu} ${_url}/oscams/oscam-dream_aarch64-$Version_new${_emu} > /dev/null 2>&1
	  if [ -s /tmp/oscam-dream_aarch64-$Version_new${_emu} ]; then
		cp /tmp/oscam-dream_aarch64-$Version_new${_emu} $_myoscambin  > /dev/null 2>&1
		rm /tmp/oscam-dream_aarch64-$Version_new${_emu} > /dev/null 2>&1
	  fi
	fi
	chmod +x $_myoscambin
	systemctl start $_oscambin.service > /dev/null 2>&1
		
  else
	/etc/init.d/softcam.$_oscambin stop > /dev/null 2>&1
	if [[ $_arch == "open_arm" ]]; then
		if [[ $_emu == "-emu" ]]; then
		   _arch="open-arm"
		else
		   _arch="open_arm"
		fi
	fi
	wget -O /tmp/oscam-${_arch}-$Version_new${_emu} ${_url}/oscams/oscam-${_arch}-$Version_new${_emu} > /dev/null 2>&1
	if [ -s /tmp/oscam-${_arch}-$Version_new${_emu} ]; then
		cp /tmp/oscam-${_arch}-$Version_new${_emu} $_myoscambin  > /dev/null 2>&1
		rm /tmp/oscam-${_arch}-$Version_new${_emu} > /dev/null 2>&1
	fi
	if [[ $_arch == "aarch64" ]]; then
	  wget -O /tmp/oscam-dream_aarch64-$Version_new${_emu} ${_url}/oscams/oscam-dream_aarch64-$Version_new${_emu} > /dev/null 2>&1
	  if [ -s /tmp/oscam-dream_aarch64-$Version_new${_emu} ]; then
		cp /tmp/oscam-dream_aarch64-$Version_new${_emu} $_myoscambin  > /dev/null 2>&1
		rm /tmp/oscam-dream_aarch64-$Version_new${_emu} > /dev/null 2>&1
	  fi
	fi
	chmod +x $_myoscambin
   fi
  
  
  #bh
  if [ -f /usr/camscript/Ncam_${_oscambin}.sh ]; then
	wget -O /tmp/oscam_update.sh ${_url}/oscam_update.sh > /dev/null 2>&1
	sed -i "3s/.*/CAMNAME=\"OSCam v$Version_new${_emu}\"/" /tmp/oscam_update.sh
	sed -i "4s/.*/binary=\"${_oscambin}\"/" /tmp/oscam_update.sh
	sed -i "19s/.*/         \/usr\/softcams\/\$binary -b -r 2 -c \/etc\/tuxbox\/config\/\$binary --daemon --pidfile \/var\/tmp\/\$binary.pid --restart 2/" /tmp/oscam_update.sh
	_start="/usr/camscript/Ncam_${_oscambin}.sh start"
	mv /tmp/oscam_update.sh /usr/camscript/Ncam_${_oscambin}.sh
	chmod +x /usr/camscript/Ncam_${_oscambin}.sh
	echo "OSCam v$Version_new${_emu}" > /etc/CurrentBhCamName
	cp /etc/tuxbox/config/${_oscambin}/* /etc/tuxbox/config > /dev/null 2>&1
	sleep 2
  fi 

  #egami
  if [ -f /usr/emu_scripts/EGcam_${_oscambin}.sh ]; then
	wget -O /tmp/oscam_update.sh ${_url}/oscam_update.sh > /dev/null 2>&1
	sed -i "3s/.*/CAMNAME=\"OSCam v$Version_new${_emu}\"/" /tmp/oscam_update.sh
	sed -i "4s/.*/binary=\"${_oscambin}\"/" /tmp/oscam_update.sh
	sed -i "19s/.*/         \/usr\/bin\/\$binary \&/" /tmp/oscam_update.sh
	_start="/usr/emu_scripts/EGcam_${_oscambin}.sh start"
	mv /tmp/oscam_update.sh /usr/emu_scripts/EGcam_${_oscambin}.sh
	echo "OSCam v$Version_new${_emu}" > /etc/CurrentEGCamName
	chmod +x /usr/emu_scripts/EGcam_${_oscambin}.sh
	cp /etc/tuxbox/config/${_oscambin}/* /etc/tuxbox/config > /dev/null 2>&1
	sleep 2
  fi

  if [ -e /etc/apt/sources.list.d  ]; then
     systemctl stop ${_oscambin}.service > /dev/null 2>&1
  fi

  #vti
  if [ -f /usr/script/${_oscambin}_cam.sh ]; then
	wget -O /tmp/oscam_update.sh ${_url}/oscam_update.sh > /dev/null 2>&1
	sed -i "3s/.*/CAMNAME=\"OSCam v$Version_new${_emu}\"/" /tmp/oscam_update.sh
	sed -i "4s/.*/binary=\"${_oscambin}\"/" /tmp/oscam_update.sh
	mv /tmp/oscam_update.sh /usr/script/${_oscambin}_cam.sh
	chmod +x /usr/script/${_oscambin}_cam.sh
	_start="/usr/script/${_oscambin}_cam.sh start"
	cp /etc/tuxbox/config/${_oscambin}/* /etc/tuxbox/config > /dev/null 2>&1
	sleep 2
  fi

  #
  if [ -f /usr/script/${_oscambin}.sh ]; then
 	wget -O /tmp/oscam_update.sh ${_url}/oscam_update.sh > /dev/null 2>&1
	sed -i "3s/.*/CAMNAME=\"OSCam v$Version_new${_emu}\"/" /tmp/oscam_update.sh
	sed -i "4s/.*/binary=\"${_oscambin}\"/" /tmp/oscam_update.sh
	mv /tmp/oscam_update.sh /usr/script/${_oscambin}.sh
	_start="/usr/script/${_oscambin}.sh start"
	chmod +x /usr/script/${_oscambin}.sh
	cp /etc/tuxbox/config/${_oscambin}/* /etc/tuxbox/config > /dev/null 2>&1
	sleep 2
  fi

  if [ -f /usr/script/${_oscambin}.emu ]; then
	wget -O /tmp/oscam_update.sh ${_url}/oscam_update.sh > /dev/null 2>&1
	sed -i "3s/.*/EMUNAME=\"OSCam v$Version_new${_emu}\"/" /tmp/oscam_update.sh
	sed -i "4s/.*/binary=\"${_oscambin}\"/" /tmp/oscam_update.sh
	mv /tmp/oscam_update.sh /usr/script/${_oscambin}.emu
	chmod +x /usr/script/${_oscambin}.emu
	cp /etc/tuxbox/config/${_oscambin}/* /etc/tuxbox/config > /dev/null 2>&1
	sleep 2
  fi

  #n
  if [ -f /etc/cam.d/${_oscambin}.sh ]; then
	wget -O /tmp/oscam_update.sh ${_url}/oscam_update.sh > /dev/null 2>&1
	sed -i "3s/.*/CAMNAME=\"OSCam v$Version_new${_emu}\"/" /tmp/oscam_update.sh
	sed -i "4s/.*/binary=\"${_oscambin}\"/" /tmp/oscam_update.sh
	mv /tmp/oscam_update.sh /etc/cam.d/${_oscambin}.sh
	chmod +x /etc/cam.d/${_oscambin}.sh
	_start="/etc/cam.d/${_oscambin.sh} start"
	cp /etc/tuxbox/config/${_oscambin}/* /etc/tuxbox/config > /dev/null 2>&1
	sleep 2
  fi

  #gp4
  if [ -e /etc/apt/sources.list.d/gp4-unstable-all-feed.list ] > /dev/null 2>&1; then
		#sed -i "s/^config\.gcammanager\.currentbinary=.*/config.gcammanager.currentbinary=oscam_bin/" /etc/enigma2/gpsettings > /dev/null 2>&1
		sed -i "2s/.*/        \"name\": \"OSCam ${Version_new}${_emu}\",/" /etc/enigma2/camd_${_oscambin}.json > /dev/null 2>&1
		systemctl stop ${_oscambin} > /dev/null 2>&1
  fi

  #merlin
  if [ -r /usr/lib/enigma2/python/Plugins/Extensions/AddOnManager ] > /dev/null 2>&1; then
      #sed -i "3s/.*/OSD=\"OSCam ${Version_new}${_neon}${_emu}\"/" /usr/script/cam/${_oscambin}.sh
	  systemctl stop ${_oscambin} > /dev/null 2>&1
  fi
  
  #newenigma
  if grep -qs -i "newnigma2" /etc/image-version ; then
      sed -i "3s/.*/EMUNAME=\"OSCam ${Version_new}${_emu}\"/" /usr/script/${_oscambin}.emu > /dev/null 2>&1
	  sed -i "s/^config\.usage\.emu_name=.*/config.usage.emu_name=OSCam ${Version_new}${_emu}/" /etc/enigma2/settings > /dev/null 2>&1
	  _start="/usr/script/${_oscambin}.emu restart"
	  chmod +x /usr/script/${_oscambin}.emu > /dev/null 2>&1
  fi
  
  #Dream-Elite
  if [ -e /etc/apt/sources.list.d/dep-all-feed.list ]; then
      sed -i "2s/.*/        \"name\": \"OSCam ${Version_new}${_emu}\",/" /etc/enigma2/EliteSoftcam/camd_${_oscambin}.json
	  systemctl stop ${_oscambin} > /dev/null 2>&1
  fi
  
  #peterpan
  if [ -r /usr/ppteam ] > /dev/null 2>&1; then
      _start="/usr/ppteam/${_oscambin}.pp start"
  fi
  
  #opendreambox
  if grep -qs -i "dreamboxupdate" /etc/apt/sources.list.d/all-feed.list && [ ! -f /etc/apt/sources.list.d/dep-all-feed.list ] > /dev/null 2>&1; then
      sed -i "3s/.*/CAMNAME=\"OSCam ${Version_new}${_emu}\"/" /usr/script/bp-script/${_oscambin}_em.sh > /dev/null 2>&1
	  sed -i "4s/.*/\#emuname=\"OSCam ${Version_new}${_emu}\"/" /usr/script/bp-script/${_oscambin}_em.sh > /dev/null 2>&1
      _start="/usr/script/bp-script/${_oscambin}_em.sh restart"
	  echo "${_oscambin}" > /usr/bin/emuactive
  fi
  
  #satlodge
  if grep -qs -i "SatLodge" /etc/issue.net > /dev/null 2>&1; then
      sed -i "3s/.*/OSD=\"OSCam ${Version_new}${_emu}\"/" /usr/camscript/${_oscambin}.sh > /dev/null 2>&1
	  echo "OSCam ${Version_new}${_emu}" > /etc/clist.list
	  _start="/usr/camscript/${_oscambin}.sh restart"
  fi
	
  if [ -f /etc/init.d/softcam.${_oscambin} ]; then
	  _start="/etc/init.d/softcam.${_oscambin} restart"
	  sleep 2
  fi

  if [ -e /etc/apt/sources.list.d  ]; then
	  systemctl daemon-reload > /dev/null 2>&1
	  
	  systemctl stop ${_oscambin} > /dev/null 2>&1
      _start="systemctl restart ${_oscambin}.service" 
  fi  

  echo -e "\nOSCam changed to $Version_new${_emu}"
  eval $_start > /dev/null 2>&1
  curl --noproxy '*' --data value="OSCam v${Version_new}" "http://127.0.0.1/api/saveconfig?key=config.misc.softcams" > /dev/null 2>&1

}

main

else
  echo -e "\e[31m\nHost not reachable\n\e[0m"
fi
